name: CI
on:
  push:
    branches: [main]
  pull_request:
    types: [opened, synchronize]

jobs:
  extract-version:
    runs-on: ubuntu-latest
    outputs:
      VERSION: ${{ steps.extract.outputs.VERSION }}
    steps:
      - name: Checkout Tap
        uses: actions/checkout@v4

      - name: Extract
        id: extract
        run: |
          VERSION=$(sed -n 's|.*url ".*cb-\(.*\)\.tar\.gz".*|\1|p' Formula/cb.rb)
          if [ -z "$VERSION" ]; then
            echo "Error: Version not found in URL"
            exit 1
          fi
          echo "VERSION=$VERSION" >> $GITHUB_OUTPUT

  fetch-source-tarball:
    runs-on: ubuntu-latest
    needs: extract-version
    steps:
      - name: Fetch source tarball
        run: |
          gh release download v${{ needs.extract-version.outputs.VERSION }} \
            --repo crunchydata/bridge-cli-v2 \
            --archive tar.gz \
            --output cb-${{ needs.extract-version.outputs.VERSION }}.tar.gz
        env:
          GITHUB_TOKEN: ${{ secrets.BRIDGE_CI_BOT_TOKEN }}

      - name: Upload source tarball artifact
        uses: actions/upload-artifact@v4
        with:
          name: source-tarball
          path: "*.tar.gz"

  check-formula:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [macos-14] #[macos-13, macos-14]
    needs: [extract-version, fetch-source-tarball]
    steps:
      - name: Checkout Tap
        uses: actions/checkout@v4

      - name: Set up Homebrew
        id: set-up-homebrew
        uses: Homebrew/actions/setup-homebrew@master

      - name: Cache Homebrew Bundler RubyGems
        id: cache
        uses: actions/cache@v4
        with:
          path: ${{ steps.set-up-homebrew.outputs.gems-path }}
          key: ${{ runner.os }}-rubygems-${{ steps.set-up-homebrew.outputs.gems-hash }}
          restore-keys: ${{ runner.os }}-rubygems-

      - name: Install Homebrew Bundler RubyGems
        if: steps.cache.outputs.cache-hit != 'true'
        run: brew install-bundler-gems

      - name: Tap Repository
        run: brew tap $GITHUB_REPOSITORY

      - name: Download source tarball artifact
        uses: actions/download-artifact@v4
        with:
          name: source-tarball

      - name: Update Formula with Local Tarball URL
        run: |
          TARBALL_PATH="$GITHUB_WORKSPACE/cb-${{ needs.extract-version.outputs.VERSION }}.tar.gz"
          sed -i '' "s|url \".*\"|url \"file://$TARBALL_PATH\"|" Formula/cb.rb

          # Verify the local substitution.
          cat Formula/cb.rb

      - name: Check Formula Style
        run: brew style Formula/cb.rb

      - name: Audit Formula
        run: brew audit --strict --online --verbose cb

      - name: Install Formula
        run: brew install --build-bottle cb

      - name: Test Formula
        run: brew test cb

      - name: Generate Bottle
        if: github.event_name == 'pull_request'
        run: brew bottle cb --no-rebuild --json

      - name: Upload Bottle
        if: github.event_name == 'pull_request'
        uses: actions/upload-artifact@v4
        with:
          name: bottle-${{ matrix.os }}
          path: '*.bottle.*'

  # create-draft-release:
  #   runs-on: ubuntu-latest
  #   if: github.event_name == 'pull_request'
  #   needs: [check-formula, extract-version]
  #   steps:
  #     - name: Checkout Tap
  #       uses: actions/checkout@v4

  #     - name: Download all artifacts
  #       uses: actions/download-artifact@v4
  #       with:
  #         path: artifacts
  #         pattern: "*"
  #         merge-multiple: true

  #     - name: Debug Artifact Paths
  #       run: find artifacts -type f

  #     - name: Create Draft Release
  #       run: |
  #         gh release create v${{ needs.extract-version.outputs.VERSION }} \
  #           --notes "v${{ needs.extract-version.outputs.VERSION }}" \
  #           --title "v${{ needs.extract-version.outputs.VERSION }}" \
  #           --draft \
  #           artifacts/cb-${{ needs.extract-version.outputs.VERSION }}.tar.gz \
  #           artifacts/*.bottle.*
  #       env:
  #         GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  #     - name: Cleanup
  #       if: failure()
  #       run: |
  #         gh release delete v${{ needs.extract-version.outputs.VERSION }} --yes
  #       env:
  #         GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}